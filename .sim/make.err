make: Warning: File 'Makefile' has modification time 14299 s in the future
Cloning into 'dotfiles'...
find: ‘/scratch/ibp5092/manMetaVAR/.setup/cpp’: No such file or directory
find: ‘/scratch/ibp5092/manMetaVAR/src’: No such file or directory
✔ Setting active project to "/scratch/ibp5092/manMetaVAR".
✔ Saving "model" to "R/sysdata.rda".
ℹ Updating manMetaVAR documentation
First time using roxygen2. Upgrading automatically...
Setting `RoxygenNote` to "7.3.2"
ℹ Loading manMetaVAR
Loading required package: OpenMx
To take full advantage of multiple cores, use:
  mxOption(key='Number of Threads', value=parallel::detectCores()) #now
  Sys.setenv(OMP_NUM_THREADS=parallel::detectCores()) #before library(OpenMx)
Loading required package: fitDTVARMx
Loading required package: metaVAR
✖ In topic 'Template.Rd': Skipping; no name and/or title.
Writing 'NAMESPACE'
Writing 'Compress.Rd'
Writing 'FitDTVAR.Rd'
Writing 'FitJAGS.Rd'
Writing 'FitMetaVAR.Rd'
Writing 'FitMLVAR.Rd'
Writing 'GenData.Rd'
Writing 'summary.manmetavar_fitdtvar.Rd'
Writing 'summary.manmetavar_fitmetavar.Rd'
Writing 'summary.manmetavar_fitjags.Rd'
Writing 'summary.manmetavar_fitmlvar.Rd'
Writing 'summary.manmetavar_data.Rd'
Writing 'plot.manmetavar_data.Rd'
Writing 'manMetaVAR-package.Rd'
Writing 'params.Rd'
Writing 'SimFitDTVAR.Rd'
Writing 'SimFitJAGS.Rd'
Writing 'SimFitMetaVAR.Rd'
Writing 'SimFitMLVAR.Rd'
Writing 'SimFN.Rd'
Writing 'SimGenData.Rd'
Writing 'SimProj.Rd'
Writing 'Sim.Rd'
ℹ Updating manMetaVAR documentation
ℹ Loading manMetaVAR
✖ In topic 'Template.Rd': Skipping; no name and/or title.


processing file: /scratch/ibp5092/manMetaVAR/vignettes/session.Rmd.orig
output file: /scratch/ibp5092/manMetaVAR/vignettes/session.Rmd



processing file: /scratch/ibp5092/manMetaVAR/vignettes/sim-rep.Rmd.orig
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\0\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\r\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `rawToChar()`:
! embedded nul in string: '\r\r\0\0\0\0\0\0\r\r\r\r'
Backtrace:
     ▆
  1. ├─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2. │ └─knitr::knit(...)
  3. │   └─knitr:::process_file(text, output)
  4. │     ├─xfun:::handle_error(...)
  5. │     ├─base::withCallingHandlers(...)
  6. │     └─knitr:::process_group(group)
  7. │       └─knitr:::call_block(x)
  8. │         └─knitr:::block_exec(params)
  9. │           └─knitr:::eng_r(options)
 10. │             ├─knitr:::in_input_dir(...)
 11. │             │ └─knitr:::in_dir(input_dir(), expr)
 12. │             └─knitr (local) evaluate(...)
 13. │               └─evaluate::evaluate(...)
 14. │                 ├─base::withRestarts(...)
 15. │                 │ └─base (local) withRestartList(expr, restarts)
 16. │                 │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17. │                 │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18. │                 │   └─base (local) withRestartList(expr, restarts[-nr])
 19. │                 │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20. │                 │       └─base (local) doWithOneRestart(return(expr), restart)
 21. │                 ├─evaluate:::with_handlers(...)
 22. │                 │ ├─base::eval(call)
 23. │                 │ │ └─base::eval(call)
 24. │                 │ └─base::withCallingHandlers(...)
 25. │                 ├─base::withVisible(eval(expr, envir))
 26. │                 └─base::eval(expr, envir)
 27. │                   └─base::eval(expr, envir)
 28. │                     └─manMetaVAR::FitDTVAR(data, ncores = parallel::detectCores())
 29. │                       └─fitDTVARMx::FitDTVARIDMx(...)
 30. │                         └─fitDTVARMx:::.FitDTVAR(...)
 31. │                           └─fitDTVARMx:::.FitDTVARRun(...)
 32. │                             └─fitDTVARMx:::.FitDTVARRunID(...)
 33. │                               └─fitDTVARMx (local) foo(...)
 34. │                                 └─parallel::mclapply(...)
 35. │                                   └─base::lapply(seq_len(cores), inner.do)
 36. │                                     └─parallel (local) FUN(X[[i]], ...)
 37. │                                       ├─parallel:::sendMaster(try(lapply(X = S, FUN = FUN, ...), silent = TRUE))
 38. │                                       ├─base::try(lapply(X = S, FUN = FUN, ...), silent = TRUE)
 39. │                                       │ └─base::tryCatch(...)
 40. │                                       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 41. │                                       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 42. │                                       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 43. │                                       └─base::lapply(X = S, FUN = FUN, ...)
 44. │                                         └─fitDTVARMx (local) FUN(X[[i]], ...)
 45. │                                           └─OpenMx::mxTryHardctsem(...)
 46. │                                             └─OpenMx::mxTryHard(...)
 47. │                                               └─base::message(...)
 48. │                                                 ├─base::withRestarts(...)
 49. │                                                 │ └─base (local) withOneRestart(expr, restarts[[1L]])
 50. │                                                 │   └─base (local) doWithOneRestart(return(expr), restart)
 51. │                                                 └─base::signalCondition(cond)
 52. └─evaluate (local) `<fn>`(`<smplMssg>`)
 53.   └─watcher$capture_plot_and_output()
 54.     └─evaluate (local) capture_output()
 55.       └─evaluate (local) sink_con()
 56.         └─evaluate:::read_con(con)
 57.           └─base::rawToChar(bytes)
Error in `object$coefficients`:
! $ operator is invalid for atomic vectors
Backtrace:
     ▆
  1. └─rProject::VignettesPrecompile("/scratch/ibp5092/manMetaVAR")
  2.   └─knitr::knit(...)
  3.     └─knitr:::process_file(text, output)
  4.       ├─xfun:::handle_error(...)
  5.       ├─base::withCallingHandlers(...)
  6.       └─knitr:::process_group(group)
  7.         └─knitr:::call_block(x)
  8.           └─knitr:::block_exec(params)
  9.             └─knitr:::eng_r(options)
 10.               ├─knitr:::in_input_dir(...)
 11.               │ └─knitr:::in_dir(input_dir(), expr)
 12.               └─knitr (local) evaluate(...)
 13.                 └─evaluate::evaluate(...)
 14.                   ├─base::withRestarts(...)
 15.                   │ └─base (local) withRestartList(expr, restarts)
 16.                   │   ├─base (local) withOneRestart(withRestartList(expr, restarts[-nr]), restarts[[nr]])
 17.                   │   │ └─base (local) doWithOneRestart(return(expr), restart)
 18.                   │   └─base (local) withRestartList(expr, restarts[-nr])
 19.                   │     └─base (local) withOneRestart(expr, restarts[[1L]])
 20.                   │       └─base (local) doWithOneRestart(return(expr), restart)
 21.                   ├─evaluate:::with_handlers(...)
 22.                   │ ├─base::eval(call)
 23.                   │ │ └─base::eval(call)
 24.                   │ └─base::withCallingHandlers(...)
 25.                   ├─base::withVisible(eval(expr, envir))
 26.                   └─base::eval(expr, envir)
 27.                     └─base::eval(expr, envir)
 28.                       └─manMetaVAR::FitMetaVAR(dtvar, ncores = parallel::detectCores())
 29.                         └─metaVAR::MetaVARMx(...)
 30.                           └─fitDTVARMx:::coef.dtvaridmx(...)
 31.                             ├─stats::coef(object$output[[1]])
 32.                             └─stats:::coef.default(object$output[[1]])

Quitting from /scratch/ibp5092/manMetaVAR/vignettes/sim-rep.Rmd.orig:74-86 [unnamed-chunk-6]
Execution halted
make: *** [Makefile:75: vignettes] Error 1
cp: cannot stat '/scratch/ibp5092/manMetaVAR/vignettes/*.png': No such file or directory
make: Warning: File 'Makefile' has modification time 14140 s in the future
Cloning into 'dotfiles'...
find: ‘/scratch/ibp5092/manMetaVAR/.setup/cpp’: No such file or directory
find: ‘/scratch/ibp5092/manMetaVAR/src’: No such file or directory
ℹ No lints found.
ℹ Updating manMetaVAR documentation
ℹ Loading manMetaVAR
Loading required package: OpenMx
To take full advantage of multiple cores, use:
  mxOption(key='Number of Threads', value=parallel::detectCores()) #now
  Sys.setenv(OMP_NUM_THREADS=parallel::detectCores()) #before library(OpenMx)
Loading required package: fitDTVARMx
Loading required package: metaVAR
✖ In topic 'Template.Rd': Skipping; no name and/or title.
ℹ Updating manMetaVAR documentation
ℹ Loading manMetaVAR
✖ In topic 'Template.Rd': Skipping; no name and/or title.
ℹ Updating manMetaVAR documentation
ℹ Loading manMetaVAR
Loading required package: OpenMx
To take full advantage of multiple cores, use:
  mxOption(key='Number of Threads', value=parallel::detectCores()) #now
  Sys.setenv(OMP_NUM_THREADS=parallel::detectCores()) #before library(OpenMx)
Loading required package: fitDTVARMx
Loading required package: metaVAR
✖ In topic 'Template.Rd': Skipping; no name and/or title.
ℹ Updating manMetaVAR documentation
ℹ Loading manMetaVAR
✖ In topic 'Template.Rd': Skipping; no name and/or title.


processing file: README.Rmd
output file: README.knit.md


Preview created: /scratch/ibp5092/manMetaVAR/README.html

Output created: README.md
Converting parsed Rd's to LaTeX ..
Warning in texi2dvi(file = file, pdf = TRUE, clean = clean, quiet = quiet,  :
  texi2dvi script/program not available, using emulation
This is makeindex, version 2.17 [TeX Live 2025] (kpathsea + Thai support).
Scanning input file Rd2.idx....done (82 entries accepted, 0 rejected).
Sorting entries....done (532 comparisons).
Generating output file Rd2.ind....done (116 lines written, 0 warnings).
Output written in Rd2.ind.
Transcript written in Rd2.ilg.
This is makeindex, version 2.17 [TeX Live 2025] (kpathsea + Thai support).
Scanning input file Rd2.idx....done (82 entries accepted, 0 rejected).
Sorting entries....done (533 comparisons).
Generating output file Rd2.ind....done (115 lines written, 1 warning).
Output written in Rd2.ind.
Transcript written in Rd2.ilg.
sh: 1: /usr/bin/xdg-open: not found
Warning in system(paste(preview, output)) : error in running command
✔ 'CITATION.cff' generated
✔ Congratulations! 'CITATION.cff' is valid


processing file: /scratch/ibp5092/manMetaVAR/.setup/latex/manMetaVAR-manuscript.Rtex
output file: /scratch/ibp5092/manMetaVAR/detritus/tex/manMetaVAR-manuscript.tex

Use of uninitialized value in concatenation (.) or string at (eval 9) line 1.
Latexmk: Using bibtex to make bibliography file(s).
Latexmk: Missing input file 'TS1xcmss.fd' message in .log file:
  No file TS1xcmss.fd.
Latexmk: Missing input file 'TS1cmsmf.fd' message in .log file:
  No file TS1cmsmf.fd.
Latexmk: Using bibtex to make bibliography file(s).
Latexmk: Using bibtex to make bibliography file(s).
Latexmk: Missing input file 'TS1xcmss.fd' message in .log file:
  No file TS1xcmss.fd.
Latexmk: Missing input file 'TS1cmsmf.fd' message in .log file:
  No file TS1cmsmf.fd.
Latexmk: Using bibtex to make bibliography file(s).
Latexmk: Using bibtex to make bibliography file(s).
Latexmk: Using bibtex to make bibliography file(s).
Latexmk: Using bibtex to make bibliography file(s).
Latexmk: Missing bbl file '.setup/latex/pdf/manMetaVAR-manuscript.bbl' in following:
 No file manMetaVAR-manuscript.bbl.
Latexmk: Using biber to make bibliography file(s).
Latexmk: Using biber to make bibliography file(s).
Latexmk: Using biber to make bibliography file(s).
Latexmk: Using biber to make bibliography file(s).
── Installing package manMetaVAR into temporary library ────────────────────────
── Finished building pkgdown site for package manMetaVAR ───────────────────────
make: warning:  Clock skew detected.  Your build may be incomplete.
make: Warning: File 'Makefile' has modification time 13878 s in the future
Cloning into 'manMetaVAR'...
